{
  // Place your react-app workspace snippets here.
  // Each snippet is defined under a snippet name and has a scope, prefix, body and description.
  // Add comma separated ids of the languages where the snippet is applicable in the scope field.
  // If scope is left empty or omitted, the snippet gets applied to all languages.
  // The prefix is what is used to trigger the snippet and the body will be expanded and inserted.
  // Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.

  "React Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfc",
    "description": "Create Test",
    "body": [
      "type Props = {",
      "\tfoo?: string;",
      "}",
      "",
      "function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ foo }: Props) {",
      "\treturn <div className='w-full h-full ${TM_FILENAME_BASE}'>{foo}</div>;",
      "}",
      ""
    ]
  },

  "E2E Test": {
    "scope": "typescript",
    "prefix": "e2e",
    "description": "Create E2E Test",
    "body": [
      "import { expect, test } from '@playwright/test';",
      " ",
      "test.describe('authorized', () => {",
      "  test('should $1', async ({ page }) => {",
      "    await page.goto('/todos/28');",
      " ",
      "  });",
      "});",
      " ",
      "test.describe('unauthorized', () => {",
      "  // reset storage state in a test file to avoid authentication that was set up for the whole project",
      "  test.use({ storageState: { cookies: [], origins: [] } });",
      " ",
      "  test('should redirect back to /login', async ({ page }) => {",
      "    await page.goto('/todos/28');",
      " ",
      "    const usernameInput = page.getByRole('textbox', { name: /username/i });",
      "    const passwordInput = page.getByRole('textbox', { name: /password/i });",
      "    const submitBtn = page.getByRole('button', { name: /login/i });",
      " ",
      "    await page.waitForURL(/\/login/);",
      "    await expect(usernameInput).toBeVisible();",
      "    await expect(passwordInput).toBeVisible();",
      "    await expect(submitBtn).toBeVisible();",
      "  });",
      "});",
    ],
  }
}
